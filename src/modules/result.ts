import { IAction } from "../interfaces";

/**
* Represents the outcome of an action performed on a state. This class encapsulates the result of the action, including the state transitions and any associated errors.
* It is a core part of the library's approach to bridging functional and object-oriented programming by explicitly managing state changes and outcomes of actions.
*
* @template T The type of the state or content associated with the action's outcome.
* @template P The type of parameters the action accepts.
* @template R The type of the response produced by executing the action.
*/
export class Result<T, P, R> {
    /**
     * Indicates whether the action was successful.
     */
    private readonly _success: boolean;

    /**
     * The content or value produced by the action if successful.
     */
    private readonly _content: T | null;

    /**
     * An array of errors encountered during the action's execution.
     */
    private readonly _errors: Error[];

    /**
     * The action associated with this result.
     */
    private readonly _action: IAction<P, R>;

    /**
     * The state before the action was applied.
     */
    private readonly _prevState: T | null;

    /**
     * The state after the action was applied.
     */
    private readonly _nextState: T | null;

    /**
     * The timestamp when the Result instance was created.
     */
    private readonly _timestamp: Date;

    /**
     * The execution time of the action, calculated as the difference between the action's timestamp and the result's timestamp.
     */
    private readonly _executionTime: number | null;

    /**
     * Constructs a new Result object representing the outcome of an action.
     *
     * @param success Indicates the success or failure of the action.
     * @param content The result produced by the action, if successful.
     * @param errors An array of errors encountered, if any.
     * @param action The action that led to this result.
     * @param prevState The state before the action was applied.
     * @param nextState The state after the action was applied.
     */
    constructor(success: boolean, content: T | null = null, errors: Error[] = [], action: IAction<P, R>, prevState: T | null = null, nextState: T | null = null) {
        this._success = success;
        this._content = content;
        this._errors = errors;
        this._action = action;
        this._prevState = prevState;
        this._nextState = nextState;
        this._timestamp =  new Date();
        this._executionTime = action.timestamp ? this._timestamp.getTime() - action.timestamp.getTime() : null;
    }

    /**
     * Provides access to the success status of the action.
     *
     * @returns {boolean} True if the action was successful, false otherwise.
     */
    get success(): boolean {
        return this._success;
    }

    /**
     * Provides access to the content produced by the action if it was successful.
     * This could be the result of a computation, data retrieval, etc.
     *
     * @returns {T | null} The content generated by the action, or null if the action failed.
     */
    get content(): T | null {
        return this._content;
    }

    /**
     * Provides access to the errors encountered during the action's execution.
     * Multiple errors can be captured, reflecting various issues that occurred.
     *
     * @returns {Error[]} An array of errors, if any were encountered during the action.
     */
    get errors(): Error[] {
        return this._errors;
    }

    /**
     * Provides access to the action associated with this result.
     * This allows tracing back to the action that led to the current result.
     *
     * @returns {IAction<P,R>} The action that generated this result.
     */
    get action(): IAction<P,R> {
        return this._action;
    }

    /**
     * Provides access tp the state of the system before the action was executed.
     * Useful for understanding the state transition caused by the action.
     *
     * @returns {T | null} The state before the action, or null if not applicable.
     */
    get prevState(): T | null {
        return this._prevState;
    }

    /**
     * Provides access to the state of the system after the action was executed.
     * This represents the new state resulting from the action.
     *
     * @returns {T | null} The state after the action, or null if the action did not alter the state.
     */
    get nextState(): T | null {
        return this._nextState;
    }

    /**
     * Provides access to the timestamp of when the Result was created.
     *
     * @returns {Date} The timestamp.
     */
      get timestamp(): Date {
        return this._timestamp;
    }

    /**
     * Provides access to the execution time of the action.
     *
     * @returns {number | null} The execution time in milliseconds.
     */
    get executionTime(): number | null {
        return this._executionTime;
    }

    /**
     * Creates a successful result instance representing a successful outcome of an action.
     * This method is used when an action completes successfully, producing a new state.
     *
     * @template T The type of the state or content associated with the action's outcome.
     * @template A The type of the action, extending the IAction interface.
     *
     * @param action The action that led to this successful result.
     * @param content The content produced by the action, if successful.
     * @param prevState The state before the action was applied.
     * @param nextState The state after the action was applied.
     *
     * @returns {Result<T, A>} An instance of Result representing a successful action outcome.
     */
    public static success<T, P, R>(action: IAction<P, R>, content: T, prevState: T | null, nextState: T): Result<T, P, R> {
        return new Result<T, P, R>(true, content, [], action, prevState, nextState);
    }

    /**
     * Creates a failure result instance representing an unsuccessful outcome of an action.
     * This method is used when an action results in an error(s), impacting the state.
     *
     * @template T The type of the state associated with the action's failed outcome.
     * @template A The type of the action, extending the IAction interface.
     *
     * @param action The action that led to this unsuccessful result.
     * @param errors The errors encountered during the action's execution.
     * @param prevState The state before the action was applied.
     * @param nextState The state after the action was attempted, null if the state is unchanged.
     *
     * @returns {Result<T, A>} An instance of Result representing a failed action outcome.
     */
    public static failure<T, P, R>(action: IAction<P, R>, errors: Error[], prevState: T | null, nextState: T | null = null): Result<T, P, R> {
        return new Result<T, P, R>(false, null, errors, action, prevState, nextState);
    }

    /**
     * Transforms the content of this result using a provided function.
     * If the result is successful, the transformation function is applied to its content.
     * If the result is a failure, the original errors are preserved.
     *
     * @template U The type of the result after applying the transformation.
     *
     * @param f A transformation function to apply to the content of this result.
     *
     * @returns {Result<U, A>} A new Result instance with the transformed content if successful, or the original failure with its errors if not successful.
     */
    public map<U>(f: (content: T) => U): Result<U, P, R> {
        if (this._success) {
            const content = this._content !== null ? f(this._content) : null;
            return Result.success<U, P, R>(this._action, content as unknown as U, this._prevState as unknown as U, this._nextState as unknown as U);
        } else {
            return Result.failure<U, P, R>(this._action, this._errors, this._prevState as unknown as U, this._nextState as unknown as U);
        }
    }

    /**
     * Applies a given function to the content of this result, if successful, and returns a new Result.
     * This method is typically used for chaining operations that also return a Result, allowing for the composition of results-producing functions.
     *
     * @template U The type of the result after applying the function.
     *
     * @param f A function that takes the successful content and returns a new Result.
     *
     * @returns {Result<U, A>} A new Result instance from the execution of the provided function if the original Result was successful. If the original Result was a failure, it returns a failure Result with the original errors.
     */
    public bind<U>(f: (content: T) => Result<U, P, R>): Result<U, P, R> {
        if (this._success) {
            return this._content !== null ? f(this._content) : new Result<U, P, R>(true, null, [], this._action, this._prevState as unknown as U, this._nextState as unknown as U);
        } else {
            return Result.failure<U, P, R>(this._action, this._errors, this._prevState as unknown as U, this._nextState as unknown as U);
        }
    }

    /**
     * Applies one of two provided functions based on the success or failure of this result.
     * This method is a branching operation, allowing different handling for successful and failed outcomes.
     *
     * @template U The type of the result returned by either of the provided functions.
     *
     * @param onSuccess A function to be called if this result is successful. It takes the content and returns a new value.
     * @param onFailure A function to be called if this result is a failure. It takes the array of errors and returns a new value.
     *
     * @returns {U} The result of calling either the onSuccess or onFailure function, based on the success status of this result.
     */
    public fold<U>(onSuccess: (content: T) => U, onFailure: (errors: Error[]) => U): U {
        if (this._success) {
            return this._content !== null ? onSuccess(this._content) : onSuccess(null as unknown as T);
        } else {
            return onFailure(this._errors);
        }
    }

    /**
     * Provides a mechanism to recover from a failure, applying a function to the errors to produce a new successful result.
     * If the result is already successful, it returns the current instance.
     *
     * @param f A function that takes the array of errors and returns a new content value.
     *
     * @returns {Result<T, A>} A successful Result with new content if the original Result was a failure, otherwise returns the original Result.
     */
    public recover<U>(f: (errors: Error[]) => U): Result<U, P, R> {
        if (this._success) {
            return this as unknown as Result<U, P, R>;
        } else {
            const nextState = this._nextState !== null ? this._nextState : undefined as unknown as U;
            return Result.success<U, P, R>(this._action, f(this._errors), this._prevState as unknown as U, nextState as unknown as U);
        }
    }

    /**
     * Provides an alternative Result if the current result is a failure.
     * If the result is successful, it returns the current instance.
     *
     * @param f A function that returns an alternative Result.
     *
     * @returns {Result<T, A>} The current Result if it's successful, or the Result returned by function f if it's a failure.
     */
    public orElse<U>(f: () => Result<U, P, R>): Result<U | T, P, R> {
        return this._success ? this as unknown as Result<U | T, P, R> : f();
    }
}
